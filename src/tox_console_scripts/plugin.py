from importlib.metadata import distributions
import logging
import re
import site
import sys

from tox.plugin import impl


logger = logging.getLogger(__name__)


SCRIPT_TEMPLATE = """\
{shebang}

# autogenerated by tox-console-scripts

import sys

from {module} import {attr}


if __name__ == "__main__":
    sys.exit({main}())
"""


def pep503_normalized_name(name):
    """
    PEP503 normalized names
    https://peps.python.org/pep-0503/#normalized-names
    https://packaging.python.org/en/latest/specifications/name-normalization/#name-normalization
    """
    return re.sub(r"[-_.]+", "-", name).lower()


def distr_name(distr):
    """`name` added in importlib.metadata 3.3.0 and Python 3.10"""
    try:
        return distr.name
    except AttributeError:
        return distr.metadata["Name"]


def parse_entry_points(distr, group):
    """
    Compat only.
    - "selectable" entry points were introduced in Python 3.10
    """
    distr_eps = distr.entry_points
    try:
        # since Python3.10
        distr_eps.select
    except AttributeError:
        eps = (ep for ep in distr_eps if ep.group == group)
    else:
        eps = distr_eps.select(group=group)

    yield from ((ep.name, ep.module, ep.attr) for ep in eps)


def build_shebang(executable):
    """
    man 2 execve
    The kernel imposes a maximum length on the text that follows the "#!" char‚Äê
    acters  at  the  start of a script; characters beyond the limit are ignored.
    Before Linux 5.1, the limit is 127 characters.  Since Linux 5.1,  the  limit
    is 255 characters.
    """
    if " " not in executable and len(executable) <= 127:
        return f"#!{executable}"

    # originally taken from distlib.scripts; how it works:
    # https://github.com/pradyunsg/installer/pull/4#issuecomment-623668717
    return "#!/bin/sh\n'''exec' " + executable + ' "$0" "$@"\n' + "' '''"


def generate_entrypoints_scripts(distr, python, scriptsdir):
    """
    Optional entry_points
    https://packaging.python.org/en/latest/specifications/entry-points/
    """
    for ep_name, ep_module, ep_attr in parse_entry_points(
        distr, "console_scripts"
    ):
        logger.debug(
            "generating script %s "
            "(package: %s, package path: %s, scripts dir: %s)",
            ep_name,
            distr_name(distr),
            distr.locate_file("."),
            str(scriptsdir),
        )
        script_text = SCRIPT_TEMPLATE.format(
            shebang=build_shebang(str(python)),
            module=ep_module,
            attr=ep_attr.split(".", maxsplit=1)[0],
            main=ep_attr,
        )
        script_path = scriptsdir / ep_name
        script_path.write_text(script_text, encoding="utf-8")
        script_path.chmod(script_path.stat().st_mode | 0o555)


@impl
def tox_add_option(parser):
    parser.add_argument(
        "--console-scripts",
        action="store_true",
        help=(
            "create console_scripts of system and user site packages for "
            "virtual envs having access to globally installed packages"
        ),
    )


@impl
def tox_on_install(tox_env, arguments, section, of_type):
    if not all(
        (
            tox_env.options.console_scripts,
            tox_env.conf["sitepackages"],
            section == "PythonRun",
            of_type == "deps",
        )
    ):
        return

    logger.info("installing console scripts")
    install_console_scripts(
        tox_env.conf["env_python"], tox_env.conf["env_bin_dir"]
    )


def install_console_scripts(env_python, env_bin_dir):
    """
    Install console_scripts of system and user site packages

    All python scripts should point to virtual env's Python interpreter to
    be run in correct environment.

    According to
    https://peps.python.org/pep-0405/#isolation-from-system-site-packages:
    PEP 370 user-level site-packages are considered part of the system
    site-packages for venv purposes: they are not available from an
    isolated venv, but are available from an
    include-system-site-packages = true venv.

    1) install console scripts of packages:
    system site packages - user site packages
    2) install console scripts of packages:
    user site packages
    """
    ssp_paths = site.getsitepackages([sys.base_prefix])
    ssds = {
        pep503_normalized_name(distr_name(x)): x
        for x in distributions(path=ssp_paths)
    }

    # user site packages can be either a string or None
    usp_path = site.getusersitepackages()
    usp_paths = [] if usp_path is None else [usp_path]
    usds = {
        pep503_normalized_name(distr_name(x)): x
        for x in distributions(path=usp_paths)
    }

    logger.info("generating console scripts of system packages")
    for name in ssds.keys() - usds.keys():
        generate_entrypoints_scripts(
            ssds[name], python=env_python, scriptsdir=env_bin_dir
        )

    logger.info("generating console scripts of user packages")
    for distr in usds.values():
        generate_entrypoints_scripts(
            distr, python=env_python, scriptsdir=env_bin_dir
        )
